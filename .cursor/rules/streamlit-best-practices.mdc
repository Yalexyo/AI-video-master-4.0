---
description: 
globs: 
alwaysApply: true
---
# Streamlit项目目录结构最佳实践

## 基本目录结构

```
project_name/
├── app.py              # 主入口文件
├── config/             # 配置文件目录
│   ├── __init__.py
│   └── config.py       # 配置参数
├── data/               # 数据文件目录(如有)
├── modules/            # 功能模块目录
│   ├── __init__.py
│   ├── data_loader.py  # 数据加载
│   ├── data_process.py # 数据处理
│   └── visualization.py # 数据可视化
├── pages/              # 多页面应用的页面目录
│   ├── __init__.py
│   ├── page1.py
│   └── page2.py
├── utils/              # 工具函数目录
│   ├── __init__.py
│   └── helpers.py
├── assets/             # 静态资源(图片、CSS等)
├── tests/              # 测试代码
│   ├── __init__.py
│   └── test_modules.py
├── .gitignore
├── requirements.txt    # 依赖包
└── README.md           # 项目说明
```

## 关键最佳实践

### 模块化设计
将功能按照逻辑分离到不同模块，避免代码堆积在一个文件中。每个模块应该有明确的职责和边界。

### 多页面架构
对于复杂应用，使用Streamlit的多页面功能(pages/目录)进行页面分离，保持每个页面的代码简洁明了。

### 配置管理
将所有配置参数集中在config模块中管理，避免硬编码，便于统一调整和维护。

### 状态管理
对于复杂应用，使用`st.session_state`管理应用状态，确保数据在页面间的一致性。

### 缓存机制
合理利用`@st.cache_data`和`@st.cache_resource`装饰器提高应用性能，避免重复计算和数据加载。

### 环境变量
敏感信息(如API密钥)使用`.env`文件和环境变量管理，避免将敏感信息直接硬编码在代码中。

### 错误处理
添加全面的异常处理机制，确保应用在出现错误时能够友好地提示用户并且不会崩溃。

### 统一风格
保持UI设计的一致性，可以创建自定义组件和主题，确保应用界面专业统一。

### 代码质量保障
在进行代码修改时务必不要引入新的格式错误、语法错误或逻辑错误。每次修改后应该：
- 检查语法是否正确，确保没有缩进、括号匹配等基础错误
- 验证变量名拼写和作用域是否正确
- 确保导入的模块和函数调用格式正确
- 保持代码风格一致性，遵循PEP 8规范
- 修改后及时测试功能是否正常工作

### 良好文档
提供详细的README文档和函数注释，方便团队协作和后期维护。

## 示例代码参考

### 主应用入口 (app.py)
```python
import streamlit as st
from config.config import get_config
from modules.data_loader import load_data
from modules.visualization import create_chart

# 设置页面配置
st.set_page_config(
    page_title="我的Streamlit应用",
    page_icon="🧊",
    layout="wide",
    initial_sidebar_state="expanded"
)

# 加载配置
config = get_config()

# 初始化session_state
if "data" not in st.session_state:
    st.session_state.data = None

# 主应用
def main():
    st.title("我的Streamlit数据分析应用")
    
    # 侧边栏
    with st.sidebar:
        st.header("设置")
        uploaded_file = st.file_uploader("上传数据文件", type=["csv", "xlsx"])
        
        if uploaded_file is not None:
            try:
                st.session_state.data = load_data(uploaded_file)
                st.success("数据加载成功!")
            except Exception as e:
                st.error(f"数据加载错误: {e}")
    
    # 主要内容区
    if st.session_state.data is not None:
        st.header("数据预览")
        st.dataframe(st.session_state.data.head())
        
        st.header("数据可视化")
        fig = create_chart(st.session_state.data)
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.info("请从侧边栏上传数据文件开始分析")

if __name__ == "__main__":
    main()
```

### 配置文件 (config/config.py)
```python
import os
from dotenv import load_dotenv

# 加载环境变量
load_dotenv()

def get_config():
    """返回应用配置"""
    return {
        "app_name": "我的Streamlit应用",
        "api_key": os.getenv("API_KEY"),
        "max_file_size": 200,  # MB
        "theme_color": "#4A90E2",
        "cache_ttl": 3600,  # 缓存时间(秒)
        "debug_mode": os.getenv("DEBUG", "False").lower() == "true"
    }
```

### 数据加载模块 (modules/data_loader.py)
```python
import pandas as pd
import streamlit as st

@st.cache_data(ttl=3600)
def load_data(file):
    """加载并缓存数据
    
    Args:
        file: 上传的文件对象
        
    Returns:
        pandas.DataFrame: 加载的数据
    """
    try:
        if file.name.endswith('.csv'):
            return pd.read_csv(file)
        elif file.name.endswith(('.xls', '.xlsx')):
            return pd.read_excel(file)
        else:
            raise ValueError("不支持的文件格式，请上传CSV或Excel文件")
    except Exception as e:
        raise Exception(f"数据加载失败: {str(e)}")
```
