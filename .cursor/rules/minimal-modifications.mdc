---
description: 
globs: 
alwaysApply: true
---
# 最小化修改，专注当前任务

## 核心原则
在进行代码修改时，始终遵循最小化变更原则，确保每次修改都有明确的目标和范围。

## 修改规则

### 🎯 任务聚焦
- 仅修改与当前任务直接相关的代码文件和函数
- 明确识别任务边界，避免功能蔓延
- 一次只解决一个问题或实现一个功能

### 🚫 禁止的操作
- **禁止非必要重构**: 除非明确要求，不得重构无关代码
- **禁止格式化变更**: 保持原有代码格式和缩进风格
- **禁止优化无关代码**: 不得优化与当前任务无关的性能问题
- **禁止修改无关文件**: 严格限制修改范围，避免影响其他模块

### ✅ 推荐的做法
- **保持代码风格一致性**: 遵循文件原有的编码风格和命名约定
- **最小化影响范围**: 优先选择局部修改而非全局变更
- **逐步处理**: 如涉及多个模块，按优先级逐一处理
- **保留原有结构**: 尽量在现有架构框架内实现功能

### 📝 修改时的检查清单
1. [ ] 修改是否直接解决当前任务？
2. [ ] 是否影响了无关的代码模块？
3. [ ] 是否保持了原有的代码风格？
4. [ ] 是否遵循了现有的架构模式？
5. [ ] 修改范围是否最小化？

## 应用场景

### Bug 修复
```python
# ✅ 正确：仅修复特定bug
def process_video(video_path):
    if not os.path.exists(video_path):  # 只修复路径检查问题
        return None
    # ... 保持其他逻辑不变

# ❌ 错误：同时重构整个函数
def process_video(video_path):
    # 不要同时优化性能、重命名变量等
```

### 功能添加
```python
# ✅ 正确：最小化添加
class VideoProcessor:
    def existing_method(self):
        # 保持原有逻辑
        pass
    
    def new_feature(self):  # 仅添加必要的新方法
        # 新功能实现
        pass

# ❌ 错误：重构整个类
```

### 路径引用示例
当修改配置相关功能时，重点关注：
- [config/config.py](mdc:config/config.py) - 主配置文件
- [streamlit_app/config/](mdc:streamlit_app/config) - 应用级配置

当处理视频处理功能时，专注于：
- [streamlit_app/modules/composer.py](mdc:streamlit_app/modules/composer.py) - 视频合成核心
- [streamlit_app/pages/3_🧪_混剪工厂.py](mdc:streamlit_app/pages/3_🧪_混剪工厂.py) - 混剪工厂界面

## 质量保证
- 每次修改后进行功能验证
- 确保不破坏现有功能
- 保持代码可读性和维护性
- 记录修改原因和影响范围
